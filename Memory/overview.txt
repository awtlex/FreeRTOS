标准库的malloc() free()很可能并不适用于目标板，因为freertOS本身就是用于小型嵌入式系统的
pvPortMalloc() 而不是 malloc()
vPortFree() 而不是 free()

FreeRTOS\source\portable\MemMang\heap_1,2,3.c
在小型嵌入式系统中，通常是在启动调度器之前创建任务，队列和信号量。这种情
况表明，动态分配内存只会出现在应用程序真正开始执行实时功能之前，而且内存一旦
分配就不会再释放。这就意味着选择内存分配方案时不必考虑一些复杂的因素，比如确
定性与内存碎片等，而只需要从性能上考虑，比如代码大小和简易性。

heap_1.c
Heap_1.c 实现了一个非常基本的pvPortMalloc()版本，而且没有实现vPortFree()。
如果应用程序不需要删除任务，队列或者信号量，则具有使用heap_1 的潜质。Heap_1
总是具有确定性。


Heap_2.c
Heap_2.c 也是使用了一个由configTOTAL_HEAP_SIZE 定义大小的简单数组。不
同于heap_1 的是，heap_2 采用了一个最佳匹配算法(最接近请求大小的空闲内存块)来分配
内存，并且支持内存释放。由于声明了一个静态数组，所以会让整个应用程序看起来耗费了许多
内存——即使是在数组没有进行任何实际分配之前。
Heap_2.c 虽然不具备确定性，但是比大多数标准库实现的malloc()与free()更有效率。

Heap_3.c
Heap_3.c 简单地调用了标准库函数malloc()和free()，但是通过暂时挂起调度器使
得函数调用备线程安全特性
